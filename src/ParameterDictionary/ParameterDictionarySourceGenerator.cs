using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace ParameterDictionary;

[Generator]
public class ParameterDictionarySourceGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var provider = context.SyntaxProvider
            .CreateSyntaxProvider(
                (s, _) => s is EnumDeclarationSyntax,
                (ctx, _) => GetEnumDeclarationForSourceGen(ctx))
            .Where(t => t.reportAttributeFound)
            .Select((t, _) => t.Item1);

        context.RegisterSourceOutput(context.CompilationProvider.Combine(provider.Collect()),
            (ctx, t) => GenerateCode(ctx, t.Left, t.Right));
    }

    private static (EnumDeclarationSyntax, bool reportAttributeFound) GetEnumDeclarationForSourceGen(
        GeneratorSyntaxContext context)
    {
        var enumDeclarationSyntax = (EnumDeclarationSyntax)context.Node;

        foreach (var attributeSyntax in enumDeclarationSyntax.AttributeLists.SelectMany(attributeListSyntax =>
                     attributeListSyntax.Attributes))
        {
            if (context.SemanticModel.GetSymbolInfo(attributeSyntax).Symbol is not IMethodSymbol attributeSymbol)
                continue;

            var attributeName = attributeSymbol.ContainingType.ToDisplayString();

            if (attributeName == "ParameterDictionary.Abstract.InParameterDictionaryAttribute")
                return (enumDeclarationSyntax, true);
        }

        return (enumDeclarationSyntax, false);
    }

    private static void GenerateCode(SourceProductionContext context, Compilation compilation,
        ImmutableArray<EnumDeclarationSyntax> enumDeclarations)
    {
        var @namespace = compilation.Assembly.GetAttributes()
            .FirstOrDefault(x => x.AttributeClass?.Name == "ParameterDictionaryNamespaceAttribute")
            ?.ConstructorArguments
            .FirstOrDefault()
            .Value
            ?.ToString() ?? compilation.Assembly.Name;

        IList<(string, IEnumerable<IFieldSymbol>)> dict = [];

        foreach (var enumDeclarationSyntax in enumDeclarations)
        {
            var semanticModel = compilation.GetSemanticModel(enumDeclarationSyntax.SyntaxTree);

            if (semanticModel.GetDeclaredSymbol(enumDeclarationSyntax) is not INamedTypeSymbol enumSymbol)
                continue;

            var enumName = enumDeclarationSyntax.Identifier.Text;

            var keyValuePairs = enumSymbol.GetMembers().OfType<IFieldSymbol>();

            dict.Add((enumName, keyValuePairs));
        }

        var statements = dict.Select(x => $"""["{x.Item1}"] = {FormatParameter(x.Item2)}""");

        var source = $$"""
                       // <auto-generated/>
                       using System;
                       using System.Collections.Generic;

                       namespace {{@namespace}};

                       public static class ParameterDictionary
                       {
                           public static Dictionary<string, IEnumerable<Dictionary<string, string>>> Report = new()
                           {
                               {{string.Join(",\n        ", statements)}}
                           };
                       }
                       """;

        context.AddSource("ParameterDictionary.g.cs", SourceText.From(source, Encoding.UTF8));
    }

    private static string ResolveLabel(IFieldSymbol fieldSymbol)
    {
        return fieldSymbol.GetAttributes()
            .FirstOrDefault(x => x.AttributeClass?.Name == "ParameterLabelAttribute")
            ?.ConstructorArguments
            .FirstOrDefault()
            .Value
            ?.ToString() ?? fieldSymbol.Name;
    }

    private static IEnumerable<KeyValuePair<string, string>> ResolveParameterInfo(IFieldSymbol fieldSymbol)
    {
        List<KeyValuePair<string, string>> info =
        [
            new KeyValuePair<string, string>("Label", ResolveLabel(fieldSymbol)),
            new KeyValuePair<string, string>("Value", fieldSymbol.ConstantValue!.ToString())
        ];

        var meta = fieldSymbol.GetAttributes()
            .Where(x => x.AttributeClass?.Name == "ParameterMetaAttribute")
            .Select(x => new KeyValuePair<string, string>(
                x.ConstructorArguments[0].Value!.ToString(),
                x.ConstructorArguments[1].Value!.ToString()
            ));

        info.AddRange(meta);

        return info;
    }

    private static string FormatDictionary(IEnumerable<KeyValuePair<string, string>> info)
    {
        return $$"""
                 
                             new Dictionary<string, string>
                             {
                                 {{string.Join(", ", info.Select(x => $"{{\"{x.Key}\", \"{x.Value}\"}}"))}}
                             }
                 """;
    }

    private static string FormatParameter(IEnumerable<IFieldSymbol> fields)
    {
        return $"[{string.Join(", ", fields.Select(x => FormatDictionary(ResolveParameterInfo(x))))}]";
    }
}